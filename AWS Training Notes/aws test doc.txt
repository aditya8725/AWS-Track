Dependencies for s3
========================
Right click... any where on the folder. 
Select new --> new project
Select maven --> maven project
Create a simple project
Group : comp.aditya (package name)
artifact I'd: demo1 (folder name)
Name : demo 2
Description: this is demo


        <aws.sdk.version>2.25.3</aws.sdk.version>


        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3</artifactId>
            <version>${aws.sdk.version}</version>
        </dependency>


Create bucket
--------------
-> BucketName.
remaining all default

copy queueurl

SQS
=======

<!-- https://mvnrepository.com/artifact/software.amazon.awssdk/sqs -->
  <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>sqs</artifactId>
      <version>2.25.2</version>
  </dependency>


create SQS
===========

-> standard
-> Name: queuearp

remaining all default
------------------------------------


RDS
=====




RDS Instance creation check-list
================================
RDS Instance creation check-list

1. create a New VPC with Public Subnet, write down the name / id of VPC (Public 2,3,0)
->none 
->none

* enable
* enable

2. Create new RDS with "Standard create" option
	- Engine : MySQL (Aruroa MySQL, MariaDB)
	- Plan : Free Tier Eligible
3. Set the PASSWORD for new instance
4. choose the VPC from step-1
5. Choose option to "create new security group" use unique name for security group
	"sg-YOUNAME"
6. Set Public Access : YES

	Edit the inbound rules

7. Accept all the defaults and click "Create Database"
8. In "Storage autosacle", disable "Storage Autoscaling"
8. Wait for Database to be ready! and then click "Get Access Credentials"
9. Copy endpoint & password
10. Use "Cloud Shell" from the webconsole.
11. Use following commands in cloud shell

	$ mysql --version
	$ mysql -hENDPOINT -pPASSWORD -uUSER
	mysql (none) > create database sampledb;
	mysql (none) > use sampledb;
	mysql (sampledb) >
	mysql (sampledb) > create table emps (empid int primary key auto_increment, ename varchar(20));
	mysql (sampledb) > insert into emps (ename) values ('Dharmendra');
	mysql (sampledb) > insert into emps (ename) values ('Gajendra');
	mysql (sampledb) > insert into emps (ename) values ('Narendra');
	mysql (sampledb) > insert into emps (ename) values ('Rajendra');
	mysql (sampledb) > insert into emps (ename) values ('Surendra');
	mysql (sampledb) > commit;




mysql -hdatabasearp-1.cp46g868yhgx.us-east-2.rds.amazonaws.com -ppassword1234 -uadmin

databasearp-1.cp46g868yhgx.us-east-2.rds.amazonaws.com











================================================================================================

AWS VS---> main
AWS Practcice--> 1
AWS P ---->2




==============================================
<dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>sqs</artifactId>
      <version>2.25.2</version>
    </dependency>
 
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>sns</artifactId>
      <version>2.25.3</version>
    </dependency>
 
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>s3</artifactId>
      <version>2.25.1</version>
    </dependency>

================================================================

package com.shubham.demo2;
 
import java.io.File;
 
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
 
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;
 
@SpringBootApplication
public class Demo2Application implements CommandLineRunner {
	private String bucketName = "2005965";
	public void setBucketName(String bucketName) {
		this.bucketName = bucketName;
	}

 
	public static void main(String[] args) {
		SpringApplication.run(Demo2Application.class, args);
	}
 
	@Override
	public void run(String... args) throws Exception {
		String filepath = null;
		if(args.length < 1) {
			System.out.println("ERROR! need file path as argument.");
			filepath = "../Readme.md";
		}else {
			filepath = args[0];
		}
		System.out.println("File to be uploaded to bucket : "+filepath);
		S3Client client = S3Client.builder().region(Region.US_EAST_1).build();
		System.out.println(bucketName);
		File file = new File(filepath);
		PutObjectRequest req = PutObjectRequest.builder()
									.bucket(bucketName)
									.key(file.getName())
									.build();

		if(file.isFile() ) {
			client.putObject(req,RequestBody.fromFile(file) );
			System.out.println("File "+ filepath+" uploaded successfully");
		}else {
			System.out.println("File "+ filepath +" does not exists!");
		}

	}
 
}



